name: Python checks 🐍

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    paths:
      - ".github/workflows/**"
      - "movie-catalog/**"

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install "black==25.1.0"

      - name: Black
        run: black --check --diff ./

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run ruff check --diff
        uses: astral-sh/ruff-action@v3
        with:
          args: check --diff
          version-file: "pyproject.toml"

      - name: Run ruff check
        uses: astral-sh/ruff-action@v3
        with:
          version-file: "pyproject.toml"

      - name: Run mypy
        run: uv run mypy movie-catalog

  run-tests:
    runs-on: ubuntu-22.04
    container: python:3.13.7-slim-bookworm
    needs:
      - run-checks
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run python tests -s
        run: uv run pytest movie-catalog --cov=movie-catalog --cov-report=xml:coverage.xml --cov-report=json:coverage.json
        env:
          TESTING: 1
          APP_CONFIG__REDIS__CONNECTION__HOST: redis
          APP_CONFIG__REDIS__CONNECTION__PORT: 6379

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage.json
          retention-days: 1

  update-coverage-badge:
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest
    needs:
      - run-tests

    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Prepare coverage percentage
        run: |
          export EXTRACTED_COVERAGE=$(python -c 'import json;print(json.load(open("coverage.json"))["totals"]["percent_covered_display"])')
          echo "TOTAL_COVERAGE=$EXTRACTED_COVERAGE" >> $GITHUB_ENV
          echo "### Tests coverage: ${EXTRACTED_COVERAGE}%" >> $GITHUB_STEP_SUMMARY

      - name: Update coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 444de6018dca3ec0f1f84e9fe5208f5f
          filename: coverage.json
          label: Coverage
          message: ${{ env.TOTAL_COVERAGE }}%
          valColorRange: ${{ env.TOTAL_COVERAGE }}
          minColorRange: 70
          maxColorRange: 90

  upload-to-codecov:
    runs-on: ubuntu-latest
    needs:
      - run-tests
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ !env.ACT }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: 'true'
